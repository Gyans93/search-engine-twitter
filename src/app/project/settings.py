"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

# django
from django.core.exceptions import ImproperlyConfigured

# Other
from dotenv import load_dotenv
import os
import re

# Directories
ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
PACKAGE_ROOT = os.path.abspath(os.path.dirname(__file__))
RESOURCES_DIR = os.path.join(ROOT_DIR, 'resources')
RUNTIME_DIR = os.path.join(ROOT_DIR, 'run')
DJANGO_DIR = os.path.join(ROOT_DIR, 'src')
DOTENV_PATH = os.path.join(ROOT_DIR, "dev.env")


STATIC_DIR = os.path.join(RUNTIME_DIR, 'static')
STORAGE_DIR = os.path.join(RESOURCES_DIR, 'storage')
NFS_DIR = os.path.join(STORAGE_DIR, 'nfs/django')
LOGGING_DIR = os.path.join(RESOURCES_DIR, 'logs')

# testing suite.
os.sys.path.append(DJANGO_DIR)

if not os.path.exists(DOTENV_PATH):
    raise ImproperlyConfigured(
        "DOTENV_PATH (%s) does not exist, but is required for setting up environment" % DOTENV_PATH
    )
else:
    load_dotenv(DOTENV_PATH, verbose=True)


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'true') == 'true'

ALLOWED_HOSTS = ['*']

ENVIRONMENT = os.getenv('ENVIRONMENT', 'development').lower()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', '')

if SECRET_KEY == '':
    raise ImproperlyConfigured(
        "SECRET_KEY does not exist, but is required for setting up environment"
    )

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',

    # apps
    'twit.apps.TwitConfig',
    'api.apps.ApiConfig'

]

# REST_FRAMEWORK = {
#     # Use Django's standard `django.contrib.auth` permissions,
#     # or allow read-only access for unauthenticated users.
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
#     ]
#     'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticated', 'api.permissions.IsAjaxPermission'),
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework.authentication.SessionAuthentication',
#         'api.authentication.CustomTokenAuthentication',
#         # 'rest_framework.authentication.TokenAuthentication',
#     ),
#     'DEFAULT_THROTTLE_CLASSES': (
#         'rest_framework.throttling.UserRateThrottle',
#     ),
#     'DEFAULT_THROTTLE_RATES': {
#         'user': '750/minute',
#     },
#     # 'PAGINATE_BY': 10,
#     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
#     'PAGE_SIZE': 10,
#     'DEFAULT_FILTER_BACKENDS': ('rest_framework.filters.DjangoFilterBackend',),
#     'UNICODE_JSON': False


# }

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(DJANGO_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.getenv('POSTGRES_DB', ''),
#         'USER': os.getenv('POSTGRES_USER', ''),
#         'PASSWORD': os.getenv('POSTGRES_PASSWORD', ''),
#         'HOST': os.getenv('POSTGRES_HOST', ''),
#         'PORT': os.getenv('POSTGRES_PORT', 5432)
#
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'ENFORCE_SCHEMA': False,
        'NAME': 'django',
        'HOST': 'mongod',
        'PORT': 27017,
        'USER': 'root',
        'PASSWORD': 'pleaseUseAStr0ngPassword',
        'AUTH_SOURCE': 'admin',
        'AUTH_MECHANISM': 'SCRAM-SHA-1',
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = STATIC_DIR

MEDIA_ROOT = os.path.join(PACKAGE_ROOT, "media")
MEDIA_URL = '/media/'
DEFAULT_FILE_STORAGE = ''

TWITTER_CREDS = [
    {
        'CONSUMER_KEY': 'Omm9dSSdTOFA0FUmOYSPAvMTe',
        'CONSUMER_SECRET': 'ZqAe063JLbFUuflSE0xig8nB0HsYfA7iviKCrcJRai4RZab6lt',
        'ACCESS_TOKEN': '1217817849827213317-50bABazFrgYVIFHEkAKc7G5ucuv5Vv',
        'ACCESS_SECRET': 'CLxk6nm6iCC2jJ6obDnBh87vXflgu80YtDeYfa6h6lV19'
    }
]

MONGO_URI = 'mongodb://root:pleaseUseAStr0ngPassword@mongod:27017/admin'

TWEET_TRACKS = [
    'BTS',
    'LeBron James',
    'Kanye West',
    'Drake',
    'EXO',
    'Ariana Grande',
    'Cardi B',
    'Beyonc√©',
    'Park Ji-min',
    'Nicki Minaj'
]
EMOJI_PATTERN = re.compile("["
                u"\U0001F600-\U0001F64F"  # emoticons
                u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                u"\U0001F680-\U0001F6FF"  # transport & map symbols
                u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
                u"\U00002702-\U000027B0"
                u"\U000024C2-\U0001F251"
                u"\U0001f926-\U0001f937"
                u'\U00010000-\U0010ffff'
                u"\u200d"
                u"\u2640-\u2642"
                u"\u2600-\u2B55"
                u"\u23cf"
                u"\u23e9"
                u"\u231a"
                u"\u3030"
                u"\ufe0f"
    "]+", flags=re.UNICODE)

# CONSUMER_KEY = 'Omm9dSSdTOFA0FUmOYSPAvMTe'
# CONSUMER_SECRET = 'ZqAe063JLbFUuflSE0xig8nB0HsYfA7iviKCrcJRai4RZab6lt'
# ACCESS_TOKEN = '1217817849827213317-50bABazFrgYVIFHEkAKc7G5ucuv5Vv'
# ACCESS_SECRET = 'CLxk6nm6iCC2jJ6obDnBh87vXflgu80YtDeYfa6h6lV19'
